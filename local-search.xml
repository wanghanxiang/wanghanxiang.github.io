<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>mongodb聚合操作学习</title>
    <link href="/2020/03/24/mongodb%E8%81%9A%E5%90%88%E6%93%8D%E4%BD%9C%E5%AD%A6%E4%B9%A0/"/>
    <url>/2020/03/24/mongodb%E8%81%9A%E5%90%88%E6%93%8D%E4%BD%9C%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>mongodb聚合操作学习</p><a id="more"></a><h3 id="1-聚合管道"><a href="#1-聚合管道" class="headerlink" title="1.聚合管道"></a>1.聚合管道</h3><p>  聚合管道是由aggregation framework将文档进入一个由多个阶段（stage）组成的管道，可以对每个阶段的管道进行分组、过滤等功能，然后经过一系列的处理，输出相应的聚合结果。如图所示：</p><img src="http://xiangzaixiansheng.oss-cn-beijing.aliyuncs.com/xiangzai_blog/%E8%81%9A%E5%90%88%E6%93%8D%E4%BD%9C.png" srcset="/img/loading.gif" alt="z" style="zoom:50%;" /><p>聚合管道操作：**</p><pre><code>db.orders.aggregate([      { $match: { status: &quot;A&quot; } },      { $group: { _id: &quot;$cust_id&quot;, total: { $sum: &quot;$amount&quot; } } }])</code></pre><ul><li><p><strong>$match阶段：通过status字段过滤出符合条件的Document（即是Status等于“A”的Document）;</strong></p></li><li><p>** $group 阶段：按cust_id字段对Document进行分组，以计算每个唯一cust_id的金额总和。**</p></li></ul><h3 id="2-mongodb的常用管道和表达式"><a href="#2-mongodb的常用管道和表达式" class="headerlink" title="2 mongodb的常用管道和表达式"></a>2 mongodb的常用管道和表达式</h3><p>2.1 常用管道命令</p><p>在mongodb中，⽂档处理完毕后， 通过管道进⾏下⼀次处理 常用管道命令如下：</p><ul><li><p>$group： 将集合中的⽂档分组， 可⽤于统计结果</p></li><li><p>$match： 过滤数据， 只输出符合条件的⽂档</p></li><li><p>$project： 修改输⼊⽂档的结构， 如重命名、 增加、 删除字段、 创建计算结果</p></li><li><p>$sort： 将输⼊⽂档排序后输出</p></li><li><p>$limit： 限制聚合管道返回的⽂档数</p></li><li><p>$skip： 跳过指定数量的⽂档， 并返回余下的⽂档 </p></li></ul><p>2.2 常用表达式 </p><p>表达式：处理输⼊⽂档并输出 语法：表达式:’$列名’ 常⽤表达式:</p><ul><li><p>$sum： 计算总和， $sum:1 表示以⼀倍计数 </p></li><li><p>$avg： 计算平均值</p></li><li><p>$min： 获取最⼩值</p></li><li><p>$max： 获取最⼤值</p></li><li><p>$push： 在结果⽂档中插⼊值到⼀个数组中</p></li></ul><h3 id="3-管道命令之-group"><a href="#3-管道命令之-group" class="headerlink" title="3 管道命令之$group"></a>3 管道命令之$group</h3><p>3.1 按照某个字段进行分组</p><p>$group是所有聚合命令中用的最多的一个命令，用来将集合中的文档分组，可用于统计结果</p><p>使用示例如下</p><pre><code>db.stu.aggregate(    {$group:        {            _id:&quot;$gender&quot;,            counter:{$sum:1}        }    })</code></pre><p>其中注意点：</p><ul><li><p>db.db_name.aggregate是语法，所有的管道命令都需要写在其中</p></li><li><p>_id 表示分组的依据，按照哪个字段进行分组，需要使用$gender表示选择这个字段进行分组</p></li><li><p>$sum:1 表示把每条数据作为1进行统计，统计的是该分组下面数据的条数</p><p>3.2  group by null</p></li></ul><p>当我们需要统计整个文档的时候，$group 的另一种用途就是把整个文档分为一组进行统计</p><p>使用实例如下：</p><pre><code>db.stu.aggregate(    {$group:        {            _id:null,            counter:{$sum:1}        }    })</code></pre><p>其中注意点：</p><ul><li>_id:null 表示不指定分组的字段，即统计整个文档，此时获取的counter表示整个文档的个数</li></ul><p>3.3 数据透视</p><p>正常情况在统计的不同性别的数据的时候，需要知道所有的name，需要逐条观察，如果通过某种方式把所有的name放到一起，那么此时就可以理解为数据透视</p><p> 使用示例如下： </p><p>统计不同性别的学生</p><pre><code>db.stu.aggregate(    {$group:        {            _id:null,            name:{$push:&quot;$name&quot;}        }    })</code></pre><p>使用$$ROOT可以将整个文档放入数组中</p><pre><code>db.stu.aggregate(    {$group:        {            _id:null,            name:{$push:&quot;$$ROOT&quot;}        }    })</code></pre><p>3.4 动手</p><p>对于如下数据，需要统计出每个country/province下的userid的数量（同一个userid只统计一次）</p><p>{ “country” : “china”, “province” : “sh”, “userid” : “a” }  </p><p>{  “country” : “china”, “province” : “sh”, “userid” : “b” }  </p><p>{  “country” : “china”, “province” : “sh”, “userid” : “a” }  </p><p>{  “country” : “china”, “province” : “sh”, “userid” : “c” }  </p><p>{  “country” : “china”, “province” : “bj”, “userid” : “da” }  </p><p>{  “country” : “china”, “province” : “bj”, “userid” : “fa” }</p><p>参考答案</p><pre><code>db.tv3.aggregate(  {$group:{_id:{country:&#39;$country&#39;,province:&#39;$province&#39;,userid:&#39;$userid&#39;}}},  {$group:{_id:{country:&#39;$_id.country&#39;,province:&#39;$_id.province&#39;},count:{$sum:1}}}</code></pre><h3 id="4-管道命令之-match"><a href="#4-管道命令之-match" class="headerlink" title="4 管道命令之$match"></a>4 管道命令之$match</h3><p>$match用于进行数据的过滤，是在能够在聚合操作中使用的命令，和find区别在于$match 操作可以把结果交给下一个管道处理，而find不行</p><p>使用示例如下：</p><p> 查询年龄大于20的学生 </p><pre><code>db.stu.aggregate(    {$match:{age:{$gt:20}}    )</code></pre><p>查询年龄大于20的男女学生的人数</p><pre><code>db.stu.aggregate(    {$match:{age:{$gt:20}}    {$group:{_id:&quot;$gender&quot;,counter:{$sum:1}}}    )</code></pre><h3 id="5-管道命令之-project"><a href="#5-管道命令之-project" class="headerlink" title="5 管道命令之$project"></a>5 管道命令之$project</h3><p>$project用于修改文档的输入输出结构，例如重命名，增加，删除字段</p><p>使用示例如下：</p><p>查询学生的年龄、姓名，仅输出年龄姓名</p><pre><code>db.stu.aggregate(    {$project:{_id:0,name:1,age:1}}    )</code></pre><p>查询男女生人生，输出人数</p><pre><code>db.stu.aggregate(    {$group:{_id:&quot;$gender&quot;,counter:{$sum:1}}}    {$project:{_id:0,counter:1}}    )</code></pre><p>5.1 动手练习</p><p>对于如下数据：统计出每个country/province下的userid的数量（同一个userid只统计一次），结果中的字段为{country:”<strong>“，province:”</strong>“，counter:”*”}</p><p>{ “country” : “china”, “province” : “sh”, “userid” : “a” }  </p><p>{  “country” : “china”, “province” : “sh”, “userid” : “b” }  </p><p>{  “country” : “china”, “province” : “sh”, “userid” : “a” }  </p><p>{  “country” : “china”, “province” : “sh”, “userid” : “c” }  </p><p>{  “country” : “china”, “province” : “bj”, “userid” : “da” }  </p><p>{  “country” : “china”, “province” : “bj”, “userid” : “fa” }  </p><p>db.tv3.aggregate(</p><p>  {$group:{_id:{country:’$country’,province:’$province’,userid:’$userid’}}},</p><p>  {$group:{_id:{country:’$_id.country’,province:’$_id.province’},count:{$sum:1}}},</p><p>  {$project:{_id:0,country:’$_id.country’,province:’$_id.province’,counter:’$count’}}</p><p>  )</p><h3 id="6-管道命令之-sort"><a href="#6-管道命令之-sort" class="headerlink" title="6 管道命令之$sort"></a>6 管道命令之$sort</h3><p>$sort用于将输入的文档排序后输出</p><p>使用示例如下：</p><p>查询学生信息，按照年龄升序</p><p>db.stu.aggregate({$sort:{age:1}})</p><p>查询男女人数，按照人数降序</p><pre><code>db.stu.aggregate(    {$group:{_id:&quot;$gender&quot;,counter:{$sum:1}}},    {$sort:{counter:-1}})</code></pre><h3 id="7-管道命令之-skip-和-limit"><a href="#7-管道命令之-skip-和-limit" class="headerlink" title="7 管道命令之$skip 和 $limit"></a>7 管道命令之$skip 和 $limit</h3><ul><li><p>$limit限制返回数据的条数</p></li><li><p>$skip 跳过指定的文档数，并返回剩下的文档数</p></li><li><p>同时使用时先使用skip在使用limit </p></li></ul><p>使用示例如下：</p><p>查询2条学生信息</p><pre><code>db.stu.aggregate(    {$limit:2})</code></pre><p>查询从第三条开始的学生信息</p><pre><code>db.stu.aggregate(    {$skip:3})</code></pre><p>统计男女生人数，按照人数升序，返回第二条数据</p><pre><code>db.stu.aggregate(    {$group:{_id:&quot;$gender&quot;,counter:{$sum:1}}},    {$sort:{counter:-1}},    {$skip:1},    {$limit:1})</code></pre><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
    
    
    
    <tags>
      
      <tag>mongodb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>node.js内存管理及垃圾回收学习</title>
    <link href="/2020/03/12/node-js%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%8F%8A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%AD%A6%E4%B9%A0/"/>
    <url>/2020/03/12/node-js%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%8F%8A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>node.js内存管理基本知识介绍</p><a id="more"></a><h2 id="一、V8的内存管理机制"><a href="#一、V8的内存管理机制" class="headerlink" title="一、V8的内存管理机制"></a>一、V8的内存管理机制</h2><h2 id="1-1-内存管理模型"><a href="#1-1-内存管理模型" class="headerlink" title="1.1 内存管理模型"></a>1.1 内存管理模型</h2><p>Node程序运行中，此进程占用的所有内存称为<strong>常驻内存</strong>（Resident Set）。</p><ul><li>常驻内存由以下部分组成： <ul><li>代码区（Code Segment）：存放即将执行的代码片段</li><li>栈（Stack）：存放局部变量</li><li>堆（Heap）：存放对象、闭包上下文</li><li>堆外内存：不通过V8分配，也不受V8管理。Buffer对象的数据就存放于此。</li></ul></li></ul><img src="http://xiangzaixiansheng.oss-cn-beijing.aliyuncs.com/xiangzai_blog/%E5%86%85%E5%AD%98%E6%A0%BC%E5%BC%8F.png" srcset="/img/loading.gif" alt="x" style="zoom:50%;" /><p>除堆外内存，其余部分均由V8管理。</p><ul><li>栈（Stack）的分配与回收非常直接，当程序离开某作用域后，其栈指针下移（回退），整个作用域的局部变量都会出栈，内存收回。</li><li>最复杂的部分是堆（Heap）的管理，V8使用<strong>垃圾回收机制</strong>进行堆的内存管理，也是开发中可能造成内存泄漏的部分，是程序员的关注点，也是本文的探讨点。</li></ul><p>通常我们可以使用代码获取内存的情况：</p><pre><code>var showMem = function() {    var mem = process.memoryUsage();    var format = function(bytes) {        return (bytes/1024/1024).toFixed(2)+&#39;MB&#39;;    };    console.log(&#39;Process1: heapTotal &#39;+format(mem.heapTotal) + &#39; heapUsed &#39; + format(mem.heapUsed) + &#39; rss &#39; + format(mem.rss));};</code></pre><p>  rss是Resident Set Size的缩写，为常驻内存的总大小，heapTotal是V8为堆分配的总大小，heapUsed是已使用的堆大小。可以看到，rss是大于heapTotal的，因为rss包括且不限于堆。</p><h2 id="1-2-堆内存限制"><a href="#1-2-堆内存限制" class="headerlink" title="1.2 堆内存限制"></a>1.2 堆内存限制</h2><p>  默认情况下，V8为堆分配的内存不超过1.4G：<strong>64位系统1.4G，32位则仅分配0.7G</strong>。也就是说，如果你想使用Node程序读一个2G的文件到内存，在默认的V8配置下，是无法实现的。不过我们可以通过Node的启动命令更改V8为堆设置的内存上限：</p><pre><code>//更改老年代堆内存--max-old-space-size=3000 // 单位为MB// 更改新生代堆内存--max-new-space-size=1024 // 单位为KB</code></pre><p>  堆的内存上限在启动时就已经决定，无法动态更改，想要更改，唯一的方法是关闭进程，使用新的配置重新启动。</p><h2 id="1-3-V8的垃圾回收机制"><a href="#1-3-V8的垃圾回收机制" class="headerlink" title="1.3 V8的垃圾回收机制"></a>1.3 V8的垃圾回收机制</h2><p>  垃圾回收机制演变至今，已经出现了数种垃圾回收算法，各有千秋，适用于不同场景，没有一种垃圾回收算法能够效率最优于所有场景。因此研发者们按照存活时间长短，将对象分类，为每一类特定的对象，制定其最适合的垃圾回收算法，以提高垃圾回收总效率。</p><h3 id="1-3-1-V8的内存分代"><a href="#1-3-1-V8的内存分代" class="headerlink" title="1.3.1 V8的内存分代"></a>1.3.1 V8的内存分代</h3><ul><li><p>V8将堆中的对象分为两类：</p><ul><li><p>新生代：年轻的新对象，未经历垃圾回收或仅经历过一次</p></li><li><p>老年代：存活时间长的老对象，经历过一次或更多次垃圾回收的对象</p>  <img src="http://xiangzaixiansheng.oss-cn-beijing.aliyuncs.com/xiangzai_blog/%E6%96%B0%E8%80%81%E7%94%9F%E4%BB%A3.png" srcset="/img/loading.gif" alt="x" style="zoom:80%;" /></li></ul></li></ul><p>默认情况下，V8为老年代分配的空间，大概是新生代的40多倍。<br> <strong>新对象都会被分配到新生代中</strong>，当新生代空间不足以分配新对象时，将触发新生代的垃圾回收。 </p><h3 id="1-3-2-新生代的垃圾回收"><a href="#1-3-2-新生代的垃圾回收" class="headerlink" title="1.3.2 新生代的垃圾回收"></a>1.3.2 新生代的垃圾回收</h3><p>   新生代中的对象主要通过Scavenge算法进行垃圾回收，这是一种采用复制的方式实现内存回收的算法。<br>   Scavenge算法将新生代的总空间一分为二，只使用其中一个，另一个处于闲置，等待垃圾回收时使用。使用中的那块空间称为<strong>From</strong>，闲置的空间称为<strong>To</strong>。</p><p>当新生代触发垃圾回收时，V8将From空间中所有应该存活下来的对象依次复制到To空间。 </p><img src="http://xiangzaixiansheng.oss-cn-beijing.aliyuncs.com/xiangzai_blog/%E8%80%81%E7%94%9F%E4%BB%A3.png" srcset="/img/loading.gif" alt="x" style="zoom:80%;" /><ul><li><p>有两种情况不会将对象复制到To空间，而是<strong>晋升</strong>至老年代： </p><ul><li><p>对象此前已经经历过一次新生代垃圾回收，这次依旧应该存活，则晋升至老年代。</p></li><li><p>To空间已经使用了25%，则将此对象直接晋升至老年代。</p></li></ul></li></ul><img src="http://xiangzaixiansheng.oss-cn-beijing.aliyuncs.com/xiangzai_blog/%E5%86%85%E5%AD%98from.png" srcset="/img/loading.gif" alt="3" style="zoom:80%;" /><p>   From空间所有应该存活的对象都复制完成后，原本的From空间将被释放，成为闲置空间，原本To空间则成为使用中空间，两个空间进行<strong>角色翻转</strong>。<br>   为何To空间使用超过25%时，就需要直接将对象复制到老年代呢？因为To空间完成垃圾回收后将会翻转为From空间，新的对象分配都在此处进行，如果没有足够的空闲空间，将会影响程序的新对象分配。<br>   因为Scavenge只复制活着的对象，而根据统计学指导，新生代中大多数对象寿命都不长，长期存活对象少，则需要复制的对象相对来说很少，因此总体来说，新生代使用Scavenge算法的效率非常高。且由于Scavenge是依次连续复制，所以To空间永远不会存在内存碎片。<br>   不过由于Scavenge会将空间对半划分，所以此算法的空间利用率较低。 </p><h3 id="1-3-3-老年代的垃圾回收"><a href="#1-3-3-老年代的垃圾回收" class="headerlink" title="1.3.3 老年代的垃圾回收"></a><strong>1.3.3 老年代的垃圾回收</strong></h3><p>   在老年代中的对象，至少都已经历过一次甚至更多次垃圾回收，相对于新生代中的对象，它们有更大的概率继续存活，只有相对少数的对象面临死亡，且由于老年代的堆内存是新生代的几十倍，其中生活着大量对象，因此如果使用Scavenge算法回收老年代，将会面临大量的存活对象需要复制的情况，将老年代空间对半划分，也会浪费相当大的空间，效率低下。因此老年代垃圾回收主要采用<strong>标记清除(Mark-Sweep)</strong>和<strong>标记整理(Mark-Compact)</strong>。<br> 这两种方式并非互相替代关系，而是配合关系，在不同情况下，选择不同方式，交替配合以提高回收效率。<br> 新生代中死亡对象占多数，因此采用Scavenge算法只处理存活对象，提高效率。老年代中存活对象占多数，于是采用<strong>标记清除</strong>算法只处理死亡对象，提高效率。<br> 当老年代的垃圾回收被触发时，V8会将需要存活对象打上标记，然后将没有标记的对象，也就是需要死亡的对象，全部擦除，一次<strong>标记清除式</strong>回收就完成了：</p><img src="http://xiangzaixiansheng.oss-cn-beijing.aliyuncs.com/xiangzai_blog/%E7%81%B0%E8%89%B2%E4%B8%BA%E5%AD%98%E6%B4%BB%E5%AF%B9%E8%B1%A1%EF%BC%8C%E7%99%BD%E8%89%B2%E4%B8%BA%E6%B8%85%E9%99%A4%E5%90%8E%E7%9A%84%E9%97%B2%E7%BD%AE%E7%A9%BA%E9%97%B4.png" srcset="/img/loading.gif" alt="x" style="zoom:50%;" /><p>一切看起来都完美了，可是随着程序的继续运行，却会出现一个问题：被清除的对象遍布各个内存地址，空间有大有小，其闲置空间不连续，产生了很多内存碎片。当需要将一个足够大的对象晋升至老年代时，无法找到一个足够大的连续空间安置这个对象。</p><p> 为了解决这种空间碎片的问题，就出现了<strong>标记整理</strong>算法。它是在标记清除的基础上演变而来，当清理了死亡对象后，它会将所有存活对象往一端移动，使其内存空间紧挨，另一端就成为了连续内存：</p><img src="http://xiangzaixiansheng.oss-cn-beijing.aliyuncs.com/xiangzai_blog/%E7%81%B0%E8%89%B2%E4%B8%BA%E5%AD%98%E6%B4%BB%E5%AF%B9%E8%B1%A1%EF%BC%8C%E7%99%BD%E8%89%B2%E4%B8%BA%E6%B8%85%E9%99%A4%E5%90%8E%E7%9A%84%E9%97%B2%E7%BD%AE%E7%A9%BA%E9%97%B42.png" srcset="/img/loading.gif" style="zoom:50%;" /><p>  虽然标记整理算法可以避免空间碎片，但是却需要依次移动对象，效率比标记清除算法更低，因此大多数情况下V8会使用标记清理算法，当空间碎片不足以安放新晋升对象时，才会触发标记整理算法。 </p><h3 id="1-3-4-增量标记（Incremental-Marking）"><a href="#1-3-4-增量标记（Incremental-Marking）" class="headerlink" title="1.3.4 增量标记（Incremental Marking）"></a><strong>1.3.4 增量标记（Incremental Marking）</strong></h3><p>  早期V8在垃圾回收阶段，采用全停顿（stop the world），也就是垃圾回收时程序运行会被暂停。这在JavaScript还仅被用于浏览器端开发时，并没有什么明显的缺点，前端开发使用的内存少，大多数时候仅触发新生代垃圾回收，速度快，卡顿几乎感觉不到。但是对于Node程序，使用内存更多，在老年代垃圾回收时，全停顿很容易带来明显的程序迟滞，标记阶段很容易就会超过100ms，因此V8引入了<strong>增量标记</strong>，将标记阶段分为若干小步骤，每个步骤控制在5ms内，每运行一段时间标记动作，就让JavaScript程序执行一会儿，如此交替，明显地提高了程序流畅性，一定程度上避免了长时间卡顿。</p><h2 id="二、Node开发中的内存管理与优化"><a href="#二、Node开发中的内存管理与优化" class="headerlink" title="二、Node开发中的内存管理与优化"></a>二、Node开发中的内存管理与优化</h2><h2 id="2-1-手动变量销毁"><a href="#2-1-手动变量销毁" class="headerlink" title="2.1 手动变量销毁"></a>2.1 手动变量销毁</h2><p>  当任一作用域存活于作用域栈（作用域链）时，其中的变量都不会被销毁，其引用的数据也会一直被变量关联，得不到GC。有的作用域存活时间非常长（越是栈底，存活时间越长，最长的是<strong>全局作用域</strong>），但是其中的某些变量也许在某一时刻后就没有用处了，因此建议手动设置为null，断开引用链接，使得V8可以及时GC释放内存。</p><p>   注意，不使用var声明的变量，都会成为全局对象的属性。前端开发中全局对象为window，Node中全局对象为<strong>global</strong>，如果global中有属性已经没有用处了，一定要设置为null，因为全局作用域只有等到程序停止运行，才会销毁。</p><p>   Node中，当一个模块被引入，这个模块就会被缓存在内存中，提高下次被引用的速度。也就是说，一般情况下，整个Node程序中对同一个模块的引用，都是同一个实例（instance），这个实例一直存活在内存中。所以，如果任意模块中有变量已经不再需要，最好手动设置为null，不然会白白占用内存，成为“活着的死对象”。</p><h2 id="2-2-慎用闭包"><a href="#2-2-慎用闭包" class="headerlink" title="2.2 慎用闭包"></a>2.2 慎用闭包</h2><h3 id="2-2-1-V8的闭包实现"><a href="#2-2-1-V8的闭包实现" class="headerlink" title="2.2.1 V8的闭包实现"></a>2.2.1 V8的闭包实现</h3><p>先来看一段例子： </p><pre><code>function outer(){    var x = 1; // 真正的局部变量：outer执行完后立即死亡    var y = 2; // 上下文变量：闭包死亡后才会死亡    // 返回一个闭包    return function(){      console.log(y); // 使用了外层函数的变量 y    }}var inner = outer(); // 通过inner变量持有闭包</code></pre><p>有不少开发者认为，如果闭包被引用，那么闭包的外部函数也不会被释放，其中的所有变量都不会被销毁，比如我通过inner变量持有了闭包，此时outer中的 x、y 均活在内存中，不会被销毁。事实真是这样吗？</p><p> 答案是：<strong>在V8的实现中，当outer执行完毕，x 立即死亡，仅有 y 存活</strong>。</p><p> V8是这么做的：</p><p> 当程序进入一个函数时，将会为这个函数创建一个<strong>上下文（Context）</strong>，初始状态这个Context是空的，当读到这个函数（outer）中的闭包声明时，将会把此闭包（inner）中使用的外部变量，加入Context。在上面的例子中，由于inner函数使用了变量 y ，因此会将 y 加入Context。<strong>outer内部所有的闭包，都会持有这个Context</strong>。</p><img src="http://xiangzaixiansheng.oss-cn-beijing.aliyuncs.com/xiangzai_blog/%E4%B8%8A%E4%B8%8B%E6%96%87.png" srcset="/img/loading.gif" alt="x" style="zoom:80%;" /><p>每一个闭包都会引用其外部函数的Context，以此访问需要读取的外部变量。被闭包捕捉，加入Context中的变量，我们称为<strong>Context变量</strong>，分配在堆。而<em>真正的</em> <strong>局部变量（local variable）</strong>是 x ，保存在栈，当outer执行完毕后，其信息出栈，变量 x 自然销毁，而Context被闭包引用，如果有任何一个闭包存活，Context都将存活，y 将不会被销毁。</p><p> 举一反三，再来看一个更复杂的例子： </p><pre><code>function outer () {     var x; // 真正的局部变量    var y; // context variable, 被inner1使用    var z; // context variable, 被inner2使用    function inner1 () {       use(y);     }     function inner2 () {       use(z);     }     function inner3 () {       /* 虽然函数体为空，但是作为闭包，依旧引用outer的Context */    }     return [inner1, inner2, inner3];}</code></pre><p>x、y、z 三个变量何时死亡？</p><p> x 在outer执行完后立即死亡， y、z 需要等到inner1、inner2、inner3三个闭包都死亡后，才会死亡。</p><p> x 未被任何闭包使用，因此是一个真正的局部变量，保存在栈，函数执行完即被出栈死亡。由于 y、z 两个变量分别被inner1、inner2使用，则它们会被加入outer的Context。<strong>所有闭包</strong>都会引用外部函数的Context，即使inner3为空，不使用任何外部函数的变量，也会引用Context，所以需要等到三个闭包都死亡后，y、z 才会死亡。</p><img src="http://xiangzaixiansheng.oss-cn-beijing.aliyuncs.com/xiangzai_blog/%E5%86%85%E5%AE%B9.png" srcset="/img/loading.gif" alt="x" style="zoom:80%;" /><p> 因此：如果较大的对象成为了Context变量，建议严格控制引用此Context的闭包生命周期以及闭包数量，或在不需要时，设置为null，以免引起较多内存的长期占用。 </p><h3 id="2-2-2-避免深层闭包嵌套"><a href="#2-2-2-避免深层闭包嵌套" class="headerlink" title="2.2.2 避免深层闭包嵌套"></a><strong>2.2.2 避免深层闭包嵌套</strong></h3><pre><code>function outer() {     var x = HUGE; // 超大对象    function inner() {       var y = GIANT; // 大对象      use(x); // x 需要使用，需要成为Context变量      function innerF() {         use(y); // y 需要使用，需要成为Context变量      }       function innerG() {         /* 空函数体 */      }       return innerG;     }     return inner();}var o = outer(); // HUGE and GIANT 均得不到释放</code></pre><p> 变量 o 持有的是innerG闭包，innerG持有着inner的Context，且<strong>内部闭包的Context会持有外部闭包的Context，产生Context链</strong>。</p><p><img src="http://xiangzaixiansheng.oss-cn-beijing.aliyuncs.com/xiangzai_blog/%E6%96%87%E7%AB%A01/%E4%B8%8A%E4%B8%8B%E6%96%87%E9%93%BE.png" srcset="/img/loading.gif" alt="x"></p><p> 为了减轻GC压力，建议避免过深嵌套函数/闭包，或及早手动断开Context变量所引用的大对象。 </p><h2 id="2-3-大内存使用"><a href="#2-3-大内存使用" class="headerlink" title="2.3 大内存使用"></a>2.3 大内存使用</h2><h3 id="2-3-1-使用stream"><a href="#2-3-1-使用stream" class="headerlink" title="2.3.1 使用stream"></a><strong>2.3.1 使用stream</strong></h3><p>  当我们需要操作大文件，应该利用Node提供的stream以及其管道方法，防止一次性读入过多数据，占用堆空间，增大堆内存压力。</p><h3 id="2-3-2-使用Buffer"><a href="#2-3-2-使用Buffer" class="headerlink" title="2.3.2 使用Buffer"></a><strong>2.3.2 使用Buffer</strong></h3><p>  Buffer是操作二进制数据的对象，不论是字符串还是图片，底层都是二进制数据，因此Buffer可以适用于任何类型的文件操作。<br>   Buffer对象本身属于普通对象，保存在堆，由V8管理，但是其储存的数据，则是保存在堆外内存，是有C++申请分配的，因此不受V8管理，也不需要被V8垃圾回收，一定程度上节省了V8资源，也不必在意堆内存限制。</p><img src="http://xiangzaixiansheng.oss-cn-beijing.aliyuncs.com/xiangzai_blog/%E5%AF%B9%E5%86%85%E5%AD%98.png" srcset="/img/loading.gif" style="zoom:80%;" />]]></content>
    
    
    
    <tags>
      
      <tag>node.js</tag>
      
      <tag>内存</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
